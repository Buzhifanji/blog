import{_ as e,X as t,Y as i,a1 as l}from"./framework-7f72c1b4.js";const r={},o=l('<h2 id="git分支命名规范" tabindex="-1"><a class="header-anchor" href="#git分支命名规范" aria-hidden="true">#</a> git分支命名规范</h2><blockquote><p>git 分支命名规范 为规范开发，保持代码提交记录以及 git 分支结构清晰，方便后续维护，现规范 git 的相关操作。</p></blockquote><p>git 分支分为<strong>集成分支、功能分支和修复分支</strong>，分别命名为 develop、feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p><ul><li><strong>master</strong>: 主分支，永远是可用的稳定版本，用于<strong>发布重大版本更新</strong>，不能直接在该分支上开发。</li><li><strong>develop</strong>：开发主分支，所有新功能以这个分支来创建自己的开发分支，该分支<strong>只做合并操作</strong>，不能直接在该分支上进行开发。</li><li><strong>临时性分支</strong>：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支) <ul><li><strong>feature</strong>：功能分支，它是为了<strong>开发某种特定功能</strong>。从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。 <ul><li>feature-xxx：功能开发分支</li><li>feature-xxx-fix：功能bug修复分支，</li></ul></li><li><strong>release</strong>：预发布分支，指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-的形式</li><li><strong>hotfix</strong>：修补bug分支，软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-***的形式。</li></ul></li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p>一个分支尽量开发一个功能模块。不要多个功能模块在一个分支上开发</p><p>feature分支在申请合并之前，最好是先pull一下主分支develop，看一下有没有冲突，如果有，先解决冲突后再申请合并</p><h2 id="git提交记录规范" tabindex="-1"><a class="header-anchor" href="#git提交记录规范" aria-hidden="true">#</a> git提交记录规范</h2><p>每个git commit记录都需要按照固定格式，具体格式为：</p><ul><li>第一行：作者，功能模块名称或者 功能模块ID</li><li>第二行：提交描述。中英文均可 <ul><li>： + 增加代码</li><li>： * 修改代码</li><li>： - 删除代码</li></ul></li></ul>',10),a=[o];function s(n,g){return t(),i("div",null,a)}const h=e(r,[["render",s],["__file","git.html.vue"]]);export{h as default};
