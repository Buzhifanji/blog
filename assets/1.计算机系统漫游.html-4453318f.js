import{_ as l,X as r,Y as t,Z as n,$ as e,a0 as a,a1 as i,F as o}from"./framework-2bee7a6e.js";const p={},d=n("p",null,"这是深入理解计算机系统的第一章，这一章是对计算机系统知识的概括，这其中会引入一些专业术语，但并不会深入解释这些术语。书本就是我们学习知识的引入路，先让读者窥探整片森林，以防迷失在某一知识细节中。所以这一章很重要，应该好好读一读。",-1),c={href:"https://www.bilibili.com/video/BV1cD4y1D7uR/?spm_id_from=333.788&vd_source=db32dbb771562f27b0d0eac9992d81bb",target:"_blank",rel:"noopener noreferrer"},h=i(`<p>这一章以打印“hello world”为例，讲述程序在计算机系统的生命周期，并介绍计算机系统的主要概念和主题。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-1-信息就是位-上下文" tabindex="-1"><a class="header-anchor" href="#_1-1-信息就是位-上下文" aria-hidden="true">#</a> 1.1 信息就是位 + 上下文</h2><p><strong>位</strong>是计算机最小单位，其值由 0 和 1 组成，又称为<strong>比特</strong>。8 位被组织成一组，称为<strong>字节</strong>。</p><p>程序最终执行的时候，最终都会转为二进制，而转换的依据就是<strong>上下文</strong>。</p>`,5),u={href:"https://habaijian.com/",target:"_blank",rel:"noopener noreferrer"},g=i(`<h2 id="_1-2-程序的翻译" tabindex="-1"><a class="header-anchor" href="#_1-2-程序的翻译" aria-hidden="true">#</a> 1.2 程序的翻译</h2><p>执行 hello.c 的命令</p><div class="language-liunx line-numbers-mode" data-ext="liunx"><pre class="language-liunx"><code>gcc -o hello hello.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令通过<em>编译器驱动程序</em>，把源文件转化成<em>可执行目标文件</em>，这个过程一共分为四个阶段。</p><p><img src="https://cdn.jsdelivr.net/gh/Buzhifanji/imgs-store/blog/20220705135948.png" alt="程序翻译四阶段"></p><ul><li><p>预处理</p><p>读取系统头文件的内容，并插入到程序文本，得到另外一个程序。</p><p>例如 读取 hello.c 中的第一行 <code>#include &lt;stdio.h&gt;</code>头文件的内容，插入到程序文本，得到一个 hello.i 文件</p></li><li><p>编译器</p><p>把文本文件的内容翻译成汇编语言</p><p>把 hello.i 翻译成 hello.s</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>main: 
  2 subq $8, 
  %rsp 3 movl $.LCO, 
  %edi 4 call puts 5 movl $0, 
  %eax 6 addq $8, 
  %rsp 7 ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>汇编</p><p>把汇编语言翻译成机器指令，把这些指令会被打包成*可重定位目标程序（relocatable object program）*的格式，得到 hello.o，这是一个二进制文件。</p></li><li><p>链接器</p><p>合并程序内部调用的函数，得到一个可执行目标文件的内容。</p><p>在 hello 程序内部调用了 printf 函数，这个函数是 C 编译器提供的标准库函数。它会被预编译成 printf.o 文件。链接要做的事情，就是把 hello.o 和 printf.o 合并成 hello <em>可执行文件</em>。</p></li></ul><h2 id="_1-3-了解编译系统如何工作的益处" tabindex="-1"><a class="header-anchor" href="#_1-3-了解编译系统如何工作的益处" aria-hidden="true">#</a> 1.3 了解编译系统如何工作的益处</h2><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ul><p><strong>这一章抛出了很多值得思考的问题</strong></p><ul><li>switch 语句是否比一系列的if then else 高效的多？</li><li>一个函数调用的开销是多少？</li><li>while循环比for高效？</li><li>指针引用比数组引用更高效吗？</li><li>为何将循环求和的结果放到一个本地变量中，比将其放到一个通过引用传递过来的参数中相比，运行速度快很多呢？</li><li>为何只是重新排列算术表达式中的括号，既可以让一个函数运行快很多呢？</li><li>静态变量和全局变量的区别？</li><li>在不同的C文件中定义相同的两个全局变量，会发生什么？</li><li>静态库和动态库的区别？</li><li>在命令行上制定链接库，其顺序有何影响？</li><li>有些连接错误为何直到运行时才出现？</li></ul><h2 id="_1-4-程序的执行" tabindex="-1"><a class="header-anchor" href="#_1-4-程序的执行" aria-hidden="true">#</a> 1.4 程序的执行</h2><p>如何运行 hello 可执行程序，以 Unix 系统为例子：</p><ol><li>打开 shell 程序</li><li>在 shell 中输入相应可执行程序的文件名</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>linux<span class="token operator">&gt;</span> 
  ./hello 
  hello, world 
linux<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shell 程序是一个命令解释器，它输出一个提示符，等待输入命令行，然后执行这个命令 如果该命令的第一个单词不是内置的 shell 命令，那么 shell 就会假设这是一个可执行文件的名字，它将加载并运行这个文件。</p><h3 id="_1-4-1-系统的硬件组成" tabindex="-1"><a class="header-anchor" href="#_1-4-1-系统的硬件组成" aria-hidden="true">#</a> 1.4.1 系统的硬件组成</h3><p><img src="https://cdn.jsdelivr.net/gh/Buzhifanji/imgs-store/blog/20220705145808.png" alt="一个典型系统的硬件组成"></p><ul><li><p><strong>总线</strong></p><p>贯穿整个系统的一组电子管道。它携带信息<strong>字节</strong>并负责在各个部门之间传递</p></li><li><p><strong>I/O设备</strong></p><p>系统与外界联系的通道</p></li><li><p><strong>主存</strong></p><p>临时存储设备，在<strong>处理器</strong>执行程序时，用来存放程序和程序处理的数据。</p><p>从物理上讲，主存是由一组<strong>动态随机存取存储器</strong>(DRAM)芯片组成。</p><p>从逻辑上讲，存储器是一个<strong>线性的字节数组</strong>，每个字节都有其唯一的地址（数组索引），这些地址都是从零开始。</p></li><li><p><strong>处理器</strong></p><p>中央处理单元(CPU)，用于解释（或执行）存储在<strong>主存</strong>中指令的引擎。</p><p>处理的核心是<strong>程序计数器(PC)</strong>，在任何时候，PC都指向<strong>主存</strong>中的某条机器语言指令（即含有该条指令的地址）。</p><p>处理器从PC指向的主存中读取指令，解释指令的<strong>位</strong>，执行该<strong>指令指示的简单操作</strong>，然后更新PC，使其指向下一条指令。</p><p>CPU操作围绕着主存、寄存器文件、算术/逻辑单元(ALU)进行。</p></li></ul><p>::: theorem CPU操作</p><ul><li><strong>加载</strong>：从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容</li><li><strong>存储</strong>：从寄存器复制一个字节或者一个字到主存的某个位置，以覆盖这个位置上原来的内容</li><li><strong>操作</strong>：把两个寄存器的内容复制到ALU，ALU对这两个字做算术运算，并将结果存放到寄存器中，以覆盖寄存器原来的内容。</li><li><strong>跳转</strong>：从指令本身中抽取一个字，并将这个字复制到PC中，以覆盖PC中原来的值。 :::</li></ul><h2 id="_1-5-至关重要的缓存" tabindex="-1"><a class="header-anchor" href="#_1-5-至关重要的缓存" aria-hidden="true">#</a> 1.5 至关重要的缓存</h2><p>从内存角度来看，程序执会经过多次复制过程。以hello程序为例：</p><p>最初hello程序存放在磁盘上，当程序加载时，它们被复制到主存；当程序运行时，指令又从主存复制到处理器上。</p><p>相似地，数据串“hello, world\\n”开始时在磁盘上，然后复制到主存，最后从主存上复制到显示设备。</p><p>复制就是开销，因此系统设计者的一个主要目标就是使这些复制操作尽可能快地完成。</p><p><strong>根据机械原理，较大的存储设备要比较小的存储设备运行的得慢，而快速设备的造价远高于同类的低速设备。</strong></p><p>一个典型的寄存器文件只存储几百字节的信息，而主存可存放几十亿字节。然而，处理器从寄存器文件读取数据比从主存中读取数据几乎要快100倍。</p><p>因为加快处理器的运行速度比加快主存的运行速度要容易和便宜许多，所以系统设计者采用了更小更快的存储设备，称为<em>高速缓存存储器</em>(cache memory)</p><h2 id="_1-6-存储设备的层次结构" tabindex="-1"><a class="header-anchor" href="#_1-6-存储设备的层次结构" aria-hidden="true">#</a> 1.6 存储设备的层次结构</h2><p>在处理器和一个较大较慢的设备（例如主存）之间插入一个更小更快的存储设备（例如高速缓存）。</p><p><img src="https://cdn.jsdelivr.net/gh/Buzhifanji/imgs-store/blog/20220713114043.png" alt="存储器层次结构"></p><p><strong>存储器层次结构的主要思想是上一层的存储器作为第一层存储器的高速缓存</strong>。因此L1是L2的高速缓存，L2是L3的高速缓存。</p><h2 id="_1-7-操作系统管理硬件" tabindex="-1"><a class="header-anchor" href="#_1-7-操作系统管理硬件" aria-hidden="true">#</a> 1.7 操作系统管理硬件</h2><p>应用程序通过操作系统来操作硬件。</p><p><img src="https://cdn.jsdelivr.net/gh/Buzhifanji/imgs-store/blog/20220713115939.png" alt="alt"></p><p>操作系统两个基本功能：</p><ul><li>防止硬件被失控的应用程序滥用</li><li>向应用程序提供简单一致的机制来控制复杂而又强大不相同的低级硬件设备</li></ul><p>操作系统通过几个基本的抽象概念（<strong>进程、虚拟内存和文件</strong>）来实现这两个功能。</p><p><img src="https://cdn.jsdelivr.net/gh/Buzhifanji/imgs-store/blog/20220713120051.png" alt="操作系统的抽象概念"></p><p>文件时对<code>I\\O</code>设备的抽象表示，虚拟内存是对主存和磁盘 <code>I\\O</code>设备的抽象表示，进程则是对处理器、主存和<code>I\\O</code>设备的抽象表示。</p><h3 id="_1-7-1-进程" tabindex="-1"><a class="header-anchor" href="#_1-7-1-进程" aria-hidden="true">#</a> 1.7.1 进程</h3><p>进程是操作系统对一个正在运行的程序的一种抽象。</p><p>在一个系统上可以同时运行多个进程，而每个进程都好像在独占地使用硬件。</p><p>而<em>并发运行</em>，则是说一个进程的指令和另一个进程的指令交错执行。</p><p>通过处理器在进程间切换来实现并发地执行多个进程，这种机制被称为<strong>上下文切换</strong></p><h3 id="_1-7-2-线程" tabindex="-1"><a class="header-anchor" href="#_1-7-2-线程" aria-hidden="true">#</a> 1.7.2 线程</h3><p>一个进程可以由多个称为<strong>线程</strong>的执行单元组成，每个线程都运行在进程的上下文中，并享有同样的代码和数据。</p><h3 id="_1-7-3-虚拟内存" tabindex="-1"><a class="header-anchor" href="#_1-7-3-虚拟内存" aria-hidden="true">#</a> 1.7.3 虚拟内存</h3><p>虚拟内存是一个抽象概念，它为每一个进程提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的内存都是一致的，称为<strong>虚拟地址空间</strong>。</p><h3 id="_1-7-4-文件" tabindex="-1"><a class="header-anchor" href="#_1-7-4-文件" aria-hidden="true">#</a> 1.7.4 文件</h3><p>文件就是字节系列，每个<code>I\\O</code>设备，包括磁盘、键盘、显示器，甚至网络，都可以看出是文件。</p><p>文件向应用程序提供了一个统一的视图。</p>`,52);function m(v,_){const s=o("ExternalLinkIcon");return r(),t("div",null,[d,n("p",null,[e("另外关于这本书籍，B站有 UP 主专门讲解视频 "),n("a",c,[e("B站up 九曲阑干: 【合集】CSAPP-深入理解计算机系统​"),a(s)])]),h,n("p",null,[e("在大部分操作系统中使用 "),n("a",u,[e("ASCII"),a(s)]),e("来表示文本字符，以 ASCII 作为上下文，那么 ‘#’ 字符对应的字节整数值为35，‘i’ 字符对应的字节整数值为105........")]),g])}const f=l(p,[["render",m],["__file","1.计算机系统漫游.html.vue"]]);export{f as default};
