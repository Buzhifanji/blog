const t=JSON.parse('{"key":"v-2fd7bbd4","path":"/computer-tools/git.html","title":"Git 笔记","lang":"zh-CN","frontmatter":{"title":"Git 笔记","date":"2023-02-23T00:00:00.000Z","category":["git"],"tag":["git"]},"headers":[{"level":2,"title":"git分支命名规范","slug":"git分支命名规范","link":"#git分支命名规范","children":[{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"git提交记录规范","slug":"git提交记录规范","link":"#git提交记录规范","children":[]}],"git":{"createdTime":1677145060000,"updatedTime":1677145060000,"contributors":[{"name":"buzhifanji","email":"buzhifanji@163.com","commits":1}]},"readingTime":{"minutes":2,"words":599},"filePathRelative":"computer-tools/git.md","localizedDate":"2023年2月23日","excerpt":"<h2> git分支命名规范</h2>\\n<blockquote>\\n<p>git 分支命名规范 为规范开发，保持代码提交记录以及 git 分支结构清晰，方便后续维护，现规范 git 的相关操作。</p>\\n</blockquote>\\n<p>git 分支分为<strong>集成分支、功能分支和修复分支</strong>，分别命名为 develop、feature 和 hotfix，均为单数。不可使用 features、future、hotfixes、hotfixs 等错误名称。</p>\\n<ul>\\n<li><strong>master</strong>: 主分支，永远是可用的稳定版本，用于<strong>发布重大版本更新</strong>，不能直接在该分支上开发。</li>\\n<li><strong>develop</strong>：开发主分支，所有新功能以这个分支来创建自己的开发分支，该分支<strong>只做合并操作</strong>，不能直接在该分支上进行开发。</li>\\n<li><strong>临时性分支</strong>：用于应对一些特定目的的版本开发(验证OK后，应该删除此分支)\\n<ul>\\n<li><strong>feature</strong>：功能分支，它是为了<strong>开发某种特定功能</strong>。从Develop分支上面分出来的。开发完成后，要再并入Develop。可以采用feature-的形式命名。\\n<ul>\\n<li>feature-xxx：功能开发分支</li>\\n<li>feature-xxx-fix：功能bug修复分支，</li>\\n</ul>\\n</li>\\n<li><strong>release</strong>：预发布分支，指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-的形式</li>\\n<li><strong>hotfix</strong>：修补bug分支，软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-***的形式。</li>\\n</ul>\\n</li>\\n</ul>"}');export{t as data};
