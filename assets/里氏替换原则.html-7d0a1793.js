const n=JSON.parse('{"key":"v-3b8014e5","path":"/design-pattern/SOLID/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99.html","title":"设计模式SOLID原则之里氏替换原则（LSP）","lang":"zh-CN","frontmatter":{"title":"设计模式SOLID原则之里氏替换原则（LSP）","date":"2022-11-06T12:00:00.000Z","category":["设计模式","SOLID原则"],"tag":["设计模式","SOLID原则"]},"headers":[],"git":{"createdTime":1667712956000,"updatedTime":1667712956000,"contributors":[{"name":"huangbin","email":"1127779503@qq.com","commits":1}]},"readingTime":{"minutes":1.92,"words":577},"filePathRelative":"design-pattern/SOLID/里氏替换原则.md","localizedDate":"2022年11月6日","excerpt":"<p>程序中的对象应该可以在不改变程序正确性的前提下被它的子类所替换；</p>\\n<p>有点抽象，下面以 正方形不是长方形的子类 为例，来解释说明：</p>\\n<p>定义长方形</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 长方形</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Rectangle</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">width<span class=\\"token punctuation\\">,</span> height</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>width <span class=\\"token operator\\">=</span> width<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>height <span class=\\"token operator\\">=</span> height<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">get</span> <span class=\\"token function\\">area</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 计算面积</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>width <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>height<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>width<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token string\\"> x </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>height<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{n as data};
