import{_ as i,X as l,Y as p,Z as d,$ as t,a0 as n,a2 as c,a1 as a,F as e}from"./framework-2bee7a6e.js";const o={},h=a('<h2 id="整数的表示" tabindex="-1"><a class="header-anchor" href="#整数的表示" aria-hidden="true">#</a> 整数的表示</h2><p>用位来编码整数的两种的不同的方式</p><ul><li>只能表示非负数</li><li>能够表示负数、零、正数</li></ul><h3 id="_2-2-1-整型数据类型" tabindex="-1"><a class="header-anchor" href="#_2-2-1-整型数据类型" aria-hidden="true">#</a> 2.2.1 整型数据类型</h3><ul><li>32位程序上C语言整型数据类型的典型取值范围</li></ul><table><thead><tr><th>C数据类型</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>[signed] char</td><td>-128</td><td>127</td></tr><tr><td>unsigned char</td><td>0</td><td>255</td></tr><tr><td>short</td><td>-32 768</td><td>32 767</td></tr><tr><td>unsigned short</td><td>0</td><td>65 535</td></tr><tr><td>int</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>unsigned</td><td>0</td><td>4 294 967 295</td></tr><tr><td>long</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>unsigned long</td><td>0</td><td>4 294 967 295</td></tr><tr><td>int32_t</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>uint32_t</td><td>0</td><td>4 294 967 295</td></tr><tr><td>int64_t</td><td>-9 223 372 036 854 775 808</td><td>9 223 372 036 854 775 807</td></tr><tr><td>uint64_t</td><td>0</td><td>18 446 744 073 709 551 615</td></tr></tbody></table><ul><li>64位程序上C语言整型数据类型的典型取值范围</li></ul><table><thead><tr><th>C数据类型</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>[signed] char</td><td>-128</td><td>127</td></tr><tr><td>unsigned char</td><td>0</td><td>255</td></tr><tr><td>short</td><td>-32 768</td><td>32 767</td></tr><tr><td>unsigned short</td><td>0</td><td>65 535</td></tr><tr><td>int</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>unsigned</td><td>0</td><td>4 294 967 295</td></tr><tr><td>long</td><td>-9223 372 036 854 775 808</td><td>9 223 372 036 854 775 807</td></tr><tr><td>unsigned long</td><td>0</td><td>18 446 744 073 709 551 615</td></tr><tr><td>int32_t</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>uint32_t</td><td>0</td><td>4 294 967 295</td></tr><tr><td>int64_t</td><td>-9 223 372 036 854 775 808</td><td>9 223 372 036 854 775 807</td></tr><tr><td>uint64_t</td><td>0</td><td>18 446 744 073 709 551 615</td></tr></tbody></table><p><strong>负数的范围比整数的范围大 1。</strong></p><ul><li>C语言的整型数据类型的保证的取值范围。C语言标准要求这些数据类型必须至少具有这样的取值范围</li></ul><table><thead><tr><th>C数据类型</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>[signed] char</td><td>-127</td><td>127</td></tr><tr><td>unsigned char</td><td>0</td><td>255</td></tr><tr><td>short</td><td>-32 767</td><td>32 767</td></tr><tr><td>unsigned short</td><td>0</td><td>65 535</td></tr><tr><td>int</td><td>-32 767</td><td>32 767</td></tr><tr><td>unsigned</td><td>0</td><td>65 535</td></tr><tr><td>long</td><td>-2 147 483 647</td><td>2 147 483 647</td></tr><tr><td>unsigned long</td><td>0</td><td>4 294 967 295</td></tr><tr><td>int32_t</td><td>-2 147 483 648</td><td>2 147 483 647</td></tr><tr><td>uint32_t</td><td>0</td><td>4 294 967 295</td></tr><tr><td>int64_t</td><td>-9 223 372 036 854 775 808</td><td>9 223 372 036 854 775 807</td></tr><tr><td>uint64_t</td><td>0</td><td>18 446 744 073 709 551 615</td></tr></tbody></table><h3 id="_2-2-2-无符号数的编码" tabindex="-1"><a class="header-anchor" href="#_2-2-2-无符号数的编码" aria-hidden="true">#</a> 2.2.2 无符号数的编码</h3>',12),u=a(`<div class="hint-container info"><p class="hint-container-title">无符号数编码的定义</p><p>对向量 $\\overrightarrow{x}$ = $[X_{w-1}, X_{w-2}, \\dots, x_0]$:</p><p>::: center $B2U_w(\\overrightarrow{x})\\stackrel{.}{=} \\displaystyle\\sum_{i=0}^{w-1}x_i2^i$ :::</p></div><p>向量到整数的映射：</p><p>$B2U_4([0001]) = 0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 0 + 0 + 1 = 1$</p><p>$B2U_4([0101]) = 0 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 4 + 0 + 1 = 5$</p><p>$B2U_4([1011]) = 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = 8 + 0 + 2 + 1 = 11$</p><p>$B2U_4([1111]) = 1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0 = 8 + 4 + 2 + 1 = 15$</p><p>w位所能表示的范围：</p><ul><li>最小位向量 [00...0],也就是整数值0</li><li>最大位向量 [11...1],也就是整数值$2^w - 1$</li></ul><h3 id="_2-2-3补码编码" tabindex="-1"><a class="header-anchor" href="#_2-2-3补码编码" aria-hidden="true">#</a> 2.2.3补码编码</h3><p>补码将最高有效位解释为<strong>负权</strong>。</p><div class="hint-container info"><p class="hint-container-title">补码编码的定义</p><p>对向量 $\\overrightarrow{x}$ = $[X_{w-1}, X_{w-2}, \\dots, x_0]$:</p><p>::: center $B2T_w(\\overrightarrow{x})\\stackrel{.}{=}-x_{w-1}2^{w-1} + \\displaystyle\\sum_{i=0}^{w-2}x_i2^i$ :::</p></div><p>最高有效位 $x_{w-1}$ 也称为<em>符号位</em>，它的权重为 $-2^{w-1}$，是无符号表示中权重的负数。符号位设置为 1 时，表示值为负，设置 0 时，表示值为正。</p><p>向量到整数的映射：</p><p>$B2T_4([0001]) = -0 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 0 + 0 + 1 = 1$</p><p>$B2T_4([0101]) = -0 * 2^3 + 1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 0 + 4 + 0 + 1 = 5$</p><p>$B2T_4([1011]) = -1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = -8 + 0 + 2 + 1 = -5$</p><p>$B2T_4([1111]) = -1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0 = -8 + 4 + 2 + 1 = -1$</p><p>w位所能表示的范围：</p><ul><li>最小位向量 [10...0],也就是整数值$-2^{w - 1}$</li><li>最大位向量 [01...1],也就是整数值$2^{w - 1} - 1$</li></ul><p>补码的特殊性：</p><ul><li>范围不对称：$|TM_{in}| = |TM_{ax}| + 1$ (原因：一半位的模式表示负数，另一半表示非负数，而0是非负数)</li><li>最大值两倍大一点：$UM_{ax_w} = 2TM_{ax_w} + 1$</li></ul><h3 id="_2-2-4-有符号数和无符号之间的转换" tabindex="-1"><a class="header-anchor" href="#_2-2-4-有符号数和无符号之间的转换" aria-hidden="true">#</a> 2.2.4 有符号数和无符号之间的转换</h3><ul><li>补码转为无符号数</li></ul><div class="hint-container info"><p class="hint-container-title">补码转为无符号数</p><p>对满足 $TM_{in_w}\\leq x \\leq TM_{ax_w}$ 的 x 有：</p><p>::: center $$ T2U_w(x) = \\begin{cases} x + x^w,\\quad x &lt; 0 \\ x,\\quad x \\geq 0 \\end{cases} $$ :::</p></div><p>例子：$T2U_16(-12345) = -12345 + 2^{16} = 53191$</p><ul><li>无符号数转补码</li></ul><div class="hint-container info"><p class="hint-container-title">无符号数转补码</p><p>对满足 $0\\leq u \\leq uM_{ax_w}$ 的 u 有：</p><p>::: center $$ U2T_w(u) = \\begin{cases} u,\\quad u \\leq TM_{ax_w} \\ u - 2^w,\\quad u &gt; TM_{ax_w} \\end{cases} $$ :::</p></div><h3 id="_2-2-5-扩展整数" tabindex="-1"><a class="header-anchor" href="#_2-2-5-扩展整数" aria-hidden="true">#</a> 2.2.5 扩展整数</h3><p>一个常见的运算是在不同字长的整数之间转换，同时又保持数值的不变。我们通过扩展来实现从一个较小的数据类型转换到一个较大的类型。</p><ul><li>扩展无符号数</li></ul><p>根据<a href="#222-%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E7%BC%96%E7%A0%81">无符号数</a>的定义，扩展位 0 即可。</p><ul><li>扩展补码数</li></ul><p>如果最高有效位为 0，扩展位 0 即可。</p><p>如果最高有效位为 去，扩展扩展位 1。</p><div class="hint-container info"><p class="hint-container-title">例子</p><p>下面都是 -5 的补码表示</p><p>[1011]</p><p>[11011]</p><p>[111011]</p></div><h3 id="_2-2-6-截取数字" tabindex="-1"><a class="header-anchor" href="#_2-2-6-截取数字" aria-hidden="true">#</a> 2.2.6 截取数字</h3><p>上面我们把一个较小的数据类型转换为较大的数据类型，那么较大的数据类型转换为较小的数据就要通过截取数字来实现。</p><ul><li>截断无符号数 将一个 w 位的无符号数，截断成 k 位，丢弃最高的 w - k 位。截断操作对应取模运算。以十进制数字为例子</li></ul><p>$$123 456 \\quad mod \\quad 10^3$$ $$ 1<em>10^5 + 2</em>10^4 + 3<em>10^3 + \\underbrace{4</em>10^2 + 5<em>10^1 + 6</em>10^0}_{\\text{456}} $$</p><ul><li>截断补码数值</li></ul><p>有符号数分为两步走：</p><ol><li>进去截取k位取模操作（与截断无符号数相同操作）</li><li>将取模结果无符号数转换有符号数</li></ol><h2 id="整数的运算" tabindex="-1"><a class="header-anchor" href="#整数的运算" aria-hidden="true">#</a> 整数的运算</h2><h3 id="_2-3-1-无符号加法" tabindex="-1"><a class="header-anchor" href="#_2-3-1-无符号加法" aria-hidden="true">#</a> 2.3.1 无符号加法</h3><p>无符号编码是有取值范围的，其它最大值为$2^w$，超过最大范围的时候就溢出了。</p><div class="hint-container info"><p class="hint-container-title">无符号数加法</p><p>对满足 $0 \\leq x, y \\leq 2^w$ 的 x 和 y 有:</p><p>::: center $x + \\frac{u}{w}y = \\begin{cases} x + y,\\quad x + y &lt; 2^w \\space正常\\ x + y - 2^w,\\quad 2^w \\leq x + y &lt; 2^{w+1} \\space溢出 \\end{cases}$ :::</p></div><p>C 语言判断无符号加法是否溢出</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">uadd_ok</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 溢出</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-2-补码加法" tabindex="-1"><a class="header-anchor" href="#_2-3-2-补码加法" aria-hidden="true">#</a> 2.3.2 补码加法</h3><div class="hint-container info"><p class="hint-container-title">补码加法</p><p>对满足 $-2^{w-1} \\leq x, y \\leq 2^{w-1} - 1$ 的 x 和 y 有:</p><p>::: center $x + \\frac{t}{w}y = \\begin{cases} x + y - 2^w,\\quad 2^{w-1} \\leq x + y \\space正溢出\\ x + y,\\quad -2^{w-1} \\leq x + y \\leq 2^{w-1} \\space 正常 \\ x + y + 2^w,\\quad x + y &lt; -2^{w-1} \\space 负溢出 \\end{cases}$ :::</p></div><p>检测补码加法是否溢出</p><ul><li>正溢出</li></ul><p>当两个正数相加的和为负，就正溢出。</p><p>::: center $x \\geq0,\\space y \\geq0$</p><p>$x + y &lt; 0 \\space 正溢出$ :::</p><ul><li>负溢出</li></ul><p>当两个负数相加的和为正，就负溢出。</p><p>::: center $x \\leq0,\\space y \\leq0$</p><p>$x + y &gt; 0 \\space 负溢出$ :::</p><h3 id="_2-3-3-补码减法" tabindex="-1"><a class="header-anchor" href="#_2-3-3-补码减法" aria-hidden="true">#</a> 2.3.3 补码减法</h3>`,60),_={href:"https://zh.wikipedia.org/zh-sg/%E5%8A%A0%E6%B3%95%E9%80%86%E5%85%83",target:"_blank",rel:"noopener noreferrer"},$=a('<p>::: center 对于 $x + x^{\\lq} = x^{\\lq} + x = 0$ :::</p><h3 id="_2-3-4-无符号乘法" tabindex="-1"><a class="header-anchor" href="#_2-3-4-无符号乘法" aria-hidden="true">#</a> 2.3.4 无符号乘法</h3><h3 id="_2-3-5-补码乘法" tabindex="-1"><a class="header-anchor" href="#_2-3-5-补码乘法" aria-hidden="true">#</a> 2.3.5 补码乘法</h3><h3 id="_2-3-6-乘以常数" tabindex="-1"><a class="header-anchor" href="#_2-3-6-乘以常数" aria-hidden="true">#</a> 2.3.6 乘以常数</h3>',4);function x(w,g){const s=e("RouterLink"),r=e("ExternalLinkIcon");return l(),p("div",null,[h,d("p",null,[t("假设有一个整数数据类型有 w 位，我们可以看将"),n(s,{to:"/computer-systems/2.1%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8.html#%E4%BD%8D%E5%90%91%E9%87%8F%E8%BF%90%E7%AE%97"},{default:c(()=>[t("位向量")]),_:1}),t("写成 $\\overrightarrow{x}$ ，或者写出 $[X_{w-1}, X_{w-2}, \\dots, x_0]$，表示向量中的每一位。 把 $\\overrightarrow{x}$ 看做一个二进制表示的数，就获得了 $\\overrightarrow{x}$ 的无符号表示。在这个编码中，每个 $x_i$ 都取值 0 或 1。")]),u,d("p",null,[d("a",_,[t("加法逆元"),n(r)]),t("也就相反数。")]),$])}const b=i(o,[["render",x],["__file","2.2整数.html.vue"]]);export{b as default};
